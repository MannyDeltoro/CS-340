from pymongo import MongoClient
from pymongo.errors import PyMongoError, ConnectionFailure
import logging

# Logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseHandler:
    def __init__(self, db_name: str, coll_name: str, uri: str):
        self.uri = uri
        self.db_name = db_name
        self.coll_name = coll_name

        try:
            self.client = MongoClient(self.uri, serverSelectionTimeoutMS=5000)  # 5s timeout
            self.client.admin.command('ping')  # Force connection test
            self.database = self.client[self.db_name]
            self.collection = self.database[self.coll_name]
            logger.info(f" Connected to MongoDB: {self.db_name}.{self.coll_name}")
        except ConnectionFailure as e:
            logger.error(f" Connection failed: {e}")
            self.client = None
            self.database = None
            self.collection = None

    def insert_record(self, data: dict) -> bool:
        try:
            result = self.collection.insert_one(data)
            logger.info(f"Inserted document with _id: {result.inserted_id}")
            return bool(result.inserted_id)
        except PyMongoError as e:
            logger.error(f"Error inserting record: {e}")
            return False

    def retrieve_records(self, criteria: dict = {}, projection: dict = None, sort: list = None) -> list:
        try:
            cursor = self.collection.find(criteria, projection)
            if sort:
                cursor = cursor.sort(sort)
            return list(cursor)
        except PyMongoError as e:
            logger.error(f"Error retrieving records: {e}")
            return []

    def retrieve_one(self, criteria: dict = {}, projection: dict = None) -> dict:
        try:
            return self.collection.find_one(criteria, projection)
        except PyMongoError as e:
            logger.error(f"Error retrieving single record: {e}")
            return {}

    def count_records(self, criteria: dict = {}) -> int:
        try:
            return self.collection.count_documents(criteria)
        except PyMongoError as e:
            logger.error(f"Error counting records: {e}")
            return 0

    def update_records(self, criteria: dict, values: dict, upsert: bool = False) -> int:
        try:
            result = self.collection.update_many(criteria, {"$set": values}, upsert=upsert)
            logger.info(f"Updated {result.modified_count} documents.")
            return result.modified_count
        except PyMongoError as e:
            logger.error(f"Error updating records: {e}")
            return 0

    def delete_records(self, criteria: dict) -> int:
        try:
            result = self.collection.delete_many(criteria)
            logger.info(f"Deleted {result.deleted_count} documents.")
            return result.deleted_count
        except PyMongoError as e:
            logger.error(f"Error deleting records: {e}")
            return 0

    def close_connection(self):
        if self.client:
            self.client.close()
            logger.info(" MongoDB connection closed.")


if __name__ == "__main__":
    uri = "mongodb://aacuser:password123@nv-desktop-services.apporto.com:34472/"
    db_handler = DatabaseHandler("test", "test_collection", uri)

    if db_handler.collection:
        new_document = {"name": "Bob Dylan", "age": 40, "email": "Bob@gmail.com"}
        db_handler.insert_record(new_document)

        print("All documents:", db_handler.retrieve_records())

        # Retrieve one
        print("Single match:", db_handler.retrieve_one({"name": "Bob Dylan"}))

        # Count documents
        print("Total Bob records:", db_handler.count_records({"name": "Bob Dylan"}))

        # Update with upsert option
        db_handler.update_records({"name": "Bob Dylan"}, {"age": 41}, upsert=True)

        # Retrieve with sort
        print("Sorted by age:", db_handler.retrieve_records(sort=[("age", -1)]))

        # Delete
        db_handler.delete_records({"name": "Bob Dylan"})

        db_handler.close_connection()
