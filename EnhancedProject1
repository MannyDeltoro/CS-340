from pymongo import MongoClient
from pymongo.errors import PyMongoError, ServerSelectionTimeoutError
from typing import Dict, List, Any, Optional
import logging

# Configure logging for clear and professional feedback
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

class DatabaseHandler:
  

    def __init__(self, db_name: str, coll_name: str, uri: str) -> None:
        """Initialize connection to MongoDB collection."""
        try:
            self.client = MongoClient(uri, serverSelectionTimeoutMS=3000)
            self.client.admin.command("ping")  # Connection test
            self.database = self.client[db_name]
            self.collection = self.database[coll_name]
            logging.info(f"Connected to MongoDB: {db_name}.{coll_name}")
        except ServerSelectionTimeoutError:
            logging.error("Unable to connect to MongoDB server: connection timed out.")
            raise
        except PyMongoError as e:
            logging.error(f"Error initializing DatabaseHandler: {e}")
            raise

    def insert_record(self, data: Dict[str, Any]) -> bool:
        
        if not isinstance(data, dict):
            logging.warning("Insert failed: data must be a dictionary.")
            return False
        try:
            result = self.collection.insert_one(data)
            if result.inserted_id:
                logging.info(f"Inserted document with _id: {result.inserted_id}")
                return True
            return False
        except PyMongoError as e:
            logging.error(f"Error inserting record: {e}")
            return False

    def retrieve_records(
        self,
        criteria: Optional[Dict[str, Any]] = None,
        projection: Optional[Dict[str, int]] = None,
        limit: Optional[int] = None,
        sort_by: Optional[str] = None,
        descending: bool = False
    ) -> List[Dict[str, Any]]:
        """Retrieve documents with flexible filtering, sorting, and limiting."""
        try:
            criteria = criteria or {}
            cursor = self.collection.find(criteria, projection)
            if sort_by:
                cursor = cursor.sort(sort_by, -1 if descending else 1)
            if limit:
                cursor = cursor.limit(limit)
            results = list(cursor)
            logging.info(f"Retrieved {len(results)} record(s).")
            return results
        except PyMongoError as e:
            logging.error(f"Error retrieving records: {e}")
            return []

    def update_records(self, criteria: Dict[str, Any], values: Dict[str, Any]) -> int:
        
        if not criteria or not values:
            logging.warning("Update skipped: criteria and values must be provided.")
            return 0
        try:
            result = self.collection.update_many(criteria, {"$set": values})
            logging.info(f"Updated {result.modified_count} document(s).")
            return result.modified_count
        except PyMongoError as e:
            logging.error(f"Error updating records: {e}")
            return 0

    def delete_records(self, criteria: Dict[str, Any]) -> int:
        
        if not criteria:
            logging.warning("Delete aborted: empty criteria would remove all records.")
            return 0
        try:
            result = self.collection.delete_many(criteria)
            logging.info(f"Deleted {result.deleted_count} document(s).")
            return result.deleted_count
        except PyMongoError as e:
            logging.error(f"Error deleting records: {e}")
            return 0

    def close_connection(self) -> None:
        
        try:
            self.client.close()
            logging.info("MongoDB connection closed successfully.")
        except PyMongoError as e:
            logging.error(f"Error closing MongoDB connection: {e}")


if __name__ == "__main__":
    uri = "mongodb://aacuser:password123@nv-desktop-services.apporto.com:34472/"
    db_handler = DatabaseHandler("test", "test_collection", uri)

    new_document = {"name": "Bob Dylan", "age": 40, "email": "bob@gmail.com"}
    insert_success = db_handler.insert_record(new_document)
    print(f"Insert successful: {insert_success}")

    documents = db_handler.retrieve_records(limit=5, sort_by="name")
    print("Retrieved Documents:", documents)

    updated_count = db_handler.update_records({"name": "Bob Dylan"}, {"age": 41})
    print(f"Updated {updated_count} documents.")

    deleted_count = db_handler.delete_records({"name": "Bob Dylan"})
    print(f"Deleted {deleted_count} documents.")

    db_handler.close_connection()
